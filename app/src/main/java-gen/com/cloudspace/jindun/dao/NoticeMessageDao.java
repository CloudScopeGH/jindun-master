package com.cloudspace.jindun.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.cloudspace.jindun.dao.NoticeMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTICE_MESSAGE.
*/
public class NoticeMessageDao extends AbstractDao<NoticeMessage, Long> {

    public static final String TABLENAME = "NOTICE_MESSAGE";

    /**
     * Properties of entity NoticeMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Bigtypeid = new Property(2, String.class, "bigtypeid", false, "BIGTYPEID");
        public final static Property Typeid = new Property(3, String.class, "typeid", false, "TYPEID");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Clickurl = new Property(7, String.class, "clickurl", false, "CLICKURL");
        public final static Property Extra = new Property(8, String.class, "extra", false, "EXTRA");
        public final static Property Addtime = new Property(9, String.class, "addtime", false, "ADDTIME");
        public final static Property Image = new Property(10, String.class, "image", false, "IMAGE");
        public final static Property Noticeid = new Property(11, String.class, "noticeid", false, "NOTICEID");
        public final static Property Actionuserid = new Property(12, String.class, "actionuserid", false, "ACTIONUSERID");
        public final static Property Nickname = new Property(13, String.class, "nickname", false, "NICKNAME");
        public final static Property Readstatus = new Property(14, Integer.class, "readstatus", false, "READSTATUS");
    };


    public NoticeMessageDao(DaoConfig config) {
        super(config);
    }
    
    public NoticeMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTICE_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERID' TEXT," + // 1: userid
                "'BIGTYPEID' TEXT," + // 2: bigtypeid
                "'TYPEID' TEXT," + // 3: typeid
                "'TITLE' TEXT," + // 4: title
                "'ICON' TEXT," + // 5: icon
                "'CONTENT' TEXT," + // 6: content
                "'CLICKURL' TEXT," + // 7: clickurl
                "'EXTRA' TEXT," + // 8: extra
                "'ADDTIME' TEXT," + // 9: addtime
                "'IMAGE' TEXT," + // 10: image
                "'NOTICEID' TEXT," + // 11: noticeid
                "'ACTIONUSERID' TEXT," + // 12: actionuserid
                "'NICKNAME' TEXT," + // 13: nickname
                "'READSTATUS' INTEGER);"); // 14: readstatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTICE_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NoticeMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String bigtypeid = entity.getBigtypeid();
        if (bigtypeid != null) {
            stmt.bindString(3, bigtypeid);
        }
 
        String typeid = entity.getTypeid();
        if (typeid != null) {
            stmt.bindString(4, typeid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String clickurl = entity.getClickurl();
        if (clickurl != null) {
            stmt.bindString(8, clickurl);
        }
 
        String extra = entity.getExtra();
        if (extra != null) {
            stmt.bindString(9, extra);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(10, addtime);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(11, image);
        }
 
        String noticeid = entity.getNoticeid();
        if (noticeid != null) {
            stmt.bindString(12, noticeid);
        }
 
        String actionuserid = entity.getActionuserid();
        if (actionuserid != null) {
            stmt.bindString(13, actionuserid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(14, nickname);
        }
 
        Integer readstatus = entity.getReadstatus();
        if (readstatus != null) {
            stmt.bindLong(15, readstatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NoticeMessage readEntity(Cursor cursor, int offset) {
        NoticeMessage entity = new NoticeMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bigtypeid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // clickurl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // extra
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // addtime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // image
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // noticeid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // actionuserid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // nickname
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // readstatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NoticeMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBigtypeid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTypeid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClickurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExtra(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddtime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNoticeid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setActionuserid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNickname(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReadstatus(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NoticeMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NoticeMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
